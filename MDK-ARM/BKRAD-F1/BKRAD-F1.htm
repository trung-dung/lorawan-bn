<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [BKRAD-F1\BKRAD-F1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image BKRAD-F1\BKRAD-F1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed May 15 20:30:13 2019
<BR><P>
<H3>Maximum Stack Usage =        848 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vtaskLoRa(void*) &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[ff]">HW_BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ff]">HW_BusFault_Handler</a><BR>
 <LI><a href="#[185]">HW_MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[185]">HW_MemManage_Handler</a><BR>
 <LI><a href="#[192]">HW_UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[192]">HW_UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">DMA2_Channel2_IRQHandler</a> from stm32l4xx_it.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[74]">DummyCB</a> from loramaccrypto.o(i.DummyCB) referenced from loramaccrypto.o(i.LoRaMacCryptoInit)
 <LI><a href="#[85]">DummyCB</a> from soft-se.o(i.DummyCB) referenced from soft-se.o(i.SecureElementInit)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from gpio-board.o(i.EXTI0_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from gpio-board.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from gpio-board.o(i.EXTI1_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from gpio-board.o(i.EXTI2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from gpio-board.o(i.EXTI3_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from gpio-board.o(i.EXTI4_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from gpio-board.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[83]">EventClassBNvmCtxChanged</a> from loramac.o(i.EventClassBNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[81]">EventCommandsNvmCtxChanged</a> from loramac.o(i.EventCommandsNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[75]">EventConfirmQueueNvmCtxChanged</a> from loramac.o(i.EventConfirmQueueNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[80]">EventCryptoNvmCtxChanged</a> from loramac.o(i.EventCryptoNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[82]">EventFCntHandlerNvmCtxChanged</a> from loramac.o(i.EventFCntHandlerNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7f]">EventSecureElementNvmCtxChanged</a> from loramac.o(i.EventSecureElementNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[48]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[61]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[60]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[66]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5e]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5b]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[79]">OnAckTimeoutTimerEvent</a> from loramac.o(i.OnAckTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[6f]">OnCalibrateSystemWakeupTimeTimerEvent</a> from board.o(i.OnCalibrateSystemWakeupTimeTimerEvent) referenced from board.o(i.BoardInitMcu)
 <LI><a href="#[7b]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7c]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7e]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7a]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7d]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[77]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[78]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[76]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[19]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5f]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from stm32l4xx_it.o(i.RCC_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[67]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from rtc-board.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">RTC_WKUP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9f]">RadioCheckRfFrequency</a> from radio.o(i.RadioCheckRfFrequency) referenced from radio.o(.constdata)
 <LI><a href="#[98]">RadioGetStatus</a> from radio.o(i.RadioGetStatus) referenced from radio.o(.constdata)
 <LI><a href="#[ae]">RadioGetWakeupTime</a> from radio.o(i.RadioGetWakeupTime) referenced from radio.o(.constdata)
 <LI><a href="#[97]">RadioInit</a> from radio.o(i.RadioInit) referenced from radio.o(.constdata)
 <LI><a href="#[9b]">RadioIsChannelFree</a> from radio.o(i.RadioIsChannelFree) referenced from radio.o(.constdata)
 <LI><a href="#[9c]">RadioRandom</a> from radio.o(i.RadioRandom) referenced from radio.o(.constdata)
 <LI><a href="#[a9]">RadioRead</a> from radio.o(i.RadioRead) referenced from radio.o(.constdata)
 <LI><a href="#[ab]">RadioReadBuffer</a> from radio.o(i.RadioReadBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[a7]">RadioRssi</a> from radio.o(i.RadioRssi) referenced from radio.o(.constdata)
 <LI><a href="#[a4]">RadioRx</a> from radio.o(i.RadioRx) referenced from radio.o(.constdata)
 <LI><a href="#[a1]">RadioSend</a> from radio.o(i.RadioSend) referenced from radio.o(.constdata)
 <LI><a href="#[9a]">RadioSetChannel</a> from radio.o(i.RadioSetChannel) referenced from radio.o(.constdata)
 <LI><a href="#[ac]">RadioSetMaxPayloadLength</a> from radio.o(i.RadioSetMaxPayloadLength) referenced from radio.o(.constdata)
 <LI><a href="#[99]">RadioSetModem</a> from radio.o(i.RadioSetModem) referenced from radio.o(.constdata)
 <LI><a href="#[ad]">RadioSetPublicNetwork</a> from radio.o(i.RadioSetPublicNetwork) referenced from radio.o(.constdata)
 <LI><a href="#[9d]">RadioSetRxConfig</a> from radio.o(i.RadioSetRxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[9e]">RadioSetTxConfig</a> from radio.o(i.RadioSetTxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[a6]">RadioSetTxContinuousWave</a> from radio.o(i.RadioSetTxContinuousWave) referenced from radio.o(.constdata)
 <LI><a href="#[a2]">RadioSleep</a> from radio.o(i.RadioSleep) referenced from radio.o(.constdata)
 <LI><a href="#[a3]">RadioStandby</a> from radio.o(i.RadioStandby) referenced from radio.o(.constdata)
 <LI><a href="#[a5]">RadioStartCad</a> from radio.o(i.RadioStartCad) referenced from radio.o(.constdata)
 <LI><a href="#[a0]">RadioTimeOnAir</a> from radio.o(i.RadioTimeOnAir) referenced from radio.o(.constdata)
 <LI><a href="#[a8]">RadioWrite</a> from radio.o(i.RadioWrite) referenced from radio.o(.constdata)
 <LI><a href="#[aa]">RadioWriteBuffer</a> from radio.o(i.RadioWriteBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[63]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from stm32l4xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[70]">SPI_DMAAbortOnError</a> from stm32l4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[14]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[64]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[a]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[b]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[c]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[d]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[84]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6a]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[1a]">TAMP_STAMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[65]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from stm32l4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[71]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[73]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[72]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[86]">McpsConfirm(sMcpsConfirm*)</a> from task_lora.o(i._Z11McpsConfirmP12sMcpsConfirm) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[88]">MlmeConfirm(sMlmeConfirm*)</a> from task_lora.o(i._Z11MlmeConfirmP12sMlmeConfirm) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[92]">vtaskDislay(void*)</a> from task_display.o(i._Z11vtaskDislayPv) referenced from main_1.o(i.main)
 <LI><a href="#[87]">McpsIndication(sMcpsIndication*)</a> from task_lora.o(i._Z14McpsIndicationP15sMcpsIndication) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[89]">MlmeIndication(sMlmeIndication*)</a> from task_lora.o(i._Z14MlmeIndicationP15sMlmeIndication) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[91]">vtaskDataSerial(void*)</a> from task_sensorserial.o(i._Z15vtaskDataSerialPv) referenced from main_1.o(i.main)
 <LI><a href="#[8c]">OnLed1TimerEvent(void*)</a> from task_lora.o(i._Z16OnLed1TimerEventPv) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[8d]">OnLed2TimerEvent(void*)</a> from task_lora.o(i._Z16OnLed2TimerEventPv) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[8a]">OnMacProcessNotify()</a> from task_lora.o(i._Z18OnMacProcessNotifyv) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[8b]">OnTxNextPacketTimerEvent(void*)</a> from task_lora.o(i._Z24OnTxNextPacketTimerEventPv) referenced from task_lora.o(i._Z9vtaskLoRaPv)
 <LI><a href="#[90]">vtaskGnss(void*)</a> from task_gnss.o(i._Z9vtaskGnssPv) referenced from main_1.o(i.main)
 <LI><a href="#[93]">vtaskIWDG(void*)</a> from task_watchdog.o(i._Z9vtaskIWDGPv) referenced from main_1.o(i.main)
 <LI><a href="#[8f]">vtaskLoRa(void*)</a> from task_lora.o(i._Z9vtaskLoRaPv) referenced from main_1.o(i.main)
 <LI><a href="#[6b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[6d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[8e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[8e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[6e]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[69]">main</a> from main_1.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[95]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[94]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[96]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[32e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[32f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[330]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[331]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[332]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[333]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[326]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[325]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31f]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcMs2Tick
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_Config_Saved()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
</UL>

<P><STRONG><a name="[260]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::SimpleLCD(lcd_t*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
</UL>

<P><STRONG><a name="[334]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[335]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_Config_Saved()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDataSerial(void*)
</UL>

<P><STRONG><a name="[337]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2f3]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_get_message_type
</UL>

<P><STRONG><a name="[2dd]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_valid_checksum
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
</UL>

<P><STRONG><a name="[b8]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_valid_checksum
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[bc]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserDataMessage(char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[2f6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserDataMessage(char*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[338]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[339]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[33a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[33b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ce]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[33c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[33d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bf]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[cf]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[33e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[cd]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[d4]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[33f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>AES_CMAC_Final</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[da]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AES_CMAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[db]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[dd]"></a>AES_CMAC_Update</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[1d3]"></a>BoardCriticalSectionBegin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.BoardCriticalSectionBegin))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmGetMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetOffMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[1d4]"></a>BoardCriticalSectionEnd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.BoardCriticalSectionEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmGetMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetOffMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[e0]"></a>BoardDeInitMcu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.BoardDeInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[2d2]"></a>BoardGetRandomSeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.BoardGetRandomSeed))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[2d1]"></a>BoardGetUniqueId</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, board.o(i.BoardGetUniqueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BoardGetUniqueId
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[e3]"></a>BoardInitMcu</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, board.o(i.BoardInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BoardInitMcu &rArr; EepromMcuInit &rArr; EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART1_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStandbyMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnablePVD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_ConfigPVD
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetOffMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoardPowerSource
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitStopMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ec]"></a>BoardInitPeriph</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.BoardInitPeriph))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>BoardLowPowerHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.BoardLowPowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = BoardLowPowerHandler &rArr; LpmEnterLowPower &rArr; LpmExitStopMode &rArr; BoardInitMcu &rArr; EepromMcuInit &rArr; EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuIsErasingOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[241]"></a>CalculateCrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eeprom_emul.o(i.CalculateCrc))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPagesFullWriteVariable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVariable
</UL>

<P><STRONG><a name="[11a]"></a>CheckBankConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_interface.o(i.CheckBankConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[11e]"></a>ConfigureCrc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eeprom_emul.o(i.ConfigureCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConfigureCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[2bb]"></a>CreateDataPackage</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, common.o(i.CreateDataPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateDataPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame(unsigned char)
</UL>

<P><STRONG><a name="[10b]"></a>DEBUG_D</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, debug_hal.o(i.DEBUG_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART1_Send
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer(unsigned char*, unsigned char)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication(sMlmeIndication*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm(sMlmeConfirm*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm(sMcpsConfirm*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoinNetwork()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserDataMessage(char*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDataSerial(void*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[292]"></a>DelayMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(i.DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[110]"></a>DelayMsMcu</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay-board.o(i.DelayMsMcu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[118]"></a>DeleteCorruptedFlashAddress</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, flash_interface.o(i.DeleteCorruptedFlashAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeleteCorruptedFlashAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_DeleteCorruptedFlashAddress
</UL>

<P><STRONG><a name="[225]"></a>DetermineFrameType</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, loramac.o(i.DetermineFrameType))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[114]"></a>EE_CleanUp</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, eeprom_emul.o(i.EE_CleanUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPage
</UL>

<P><STRONG><a name="[117]"></a>EE_DeleteCorruptedFlashAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom_emul.o(i.EE_DeleteCorruptedFlashAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EE_DeleteCorruptedFlashAddress &rArr; DeleteCorruptedFlashAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCorruptedFlashAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_NMI_Handler
</UL>

<P><STRONG><a name="[119]"></a>EE_Format</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, eeprom_emul.o(i.EE_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EE_Format &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBankConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPageFullyErased
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageState
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[11d]"></a>EE_Init</STRONG> (Thumb, 2408 bytes, Stack size 56 bytes, eeprom_emul.o(i.EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBankConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureCrc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPagesFullWriteVariable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPageFullyErased
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageState
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagesTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuInit
</UL>

<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio-board.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio-board.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio-board.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio-board.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio-board.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>EepromMcuInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, eeprom-board.o(i.EepromMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = EepromMcuInit &rArr; EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[fd]"></a>EepromMcuIsErasingOnGoing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eeprom-board.o(i.EepromMcuIsErasingOnGoing))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLowPowerHandler
</UL>

<P><STRONG><a name="[17f]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_1.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[13e]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[13d]"></a>FLASH_PageErase</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[123]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[f6]"></a>FifoInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(i.FifoInit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[125]"></a>FifoPop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fifo.o(i.FifoPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FifoPop
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDataSerial(void*)
</UL>

<P><STRONG><a name="[127]"></a>FifoPush</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fifo.o(i.FifoPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FifoPush
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[e7]"></a>GetBoardPowerSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.GetBoardPowerSource))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[129]"></a>GetCtxs</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, loramac.o(i.GetCtxs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCtxs
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetNvmCtx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacFCntHandlerGetNvmCtx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetNvmCtx
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetNvmCtx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetNvmCtx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBGetNvmCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[108]"></a>GetKeyByID</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, soft-se.o(i.GetKeyByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[f3]"></a>GpioInit</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::SimpleLCD(lcd_t*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
</UL>

<P><STRONG><a name="[134]"></a>GpioMcuInit</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, gpio-board.o(i.GpioMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[137]"></a>GpioMcuSetInterrupt</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, gpio-board.o(i.GpioMcuSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpioMcuSetInterrupt &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>

<P><STRONG><a name="[135]"></a>GpioMcuWrite</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio-board.o(i.GpioMcuWrite))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>

<P><STRONG><a name="[139]"></a>GpioSetInterrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GpioSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[13a]"></a>GpioWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GpioWrite))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteDisable()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteByte(unsigned, unsigned char)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdClear()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdInit()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand4Bit(char)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdWriteText(char*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand(char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdGoToAddr(char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed2TimerEvent(void*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed1TimerEvent(void*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm(sMcpsConfirm*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
</UL>

<P><STRONG><a name="[149]"></a>GpsDataSet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, common.o(i.GpsDataSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpsDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Make_First_System_Parameter
</UL>

<P><STRONG><a name="[f8]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[fa]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_DBGMCU_EnableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[f9]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[169]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[111]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdInit()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand4Bit(char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
</UL>

<P><STRONG><a name="[13b]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
</UL>

<P><STRONG><a name="[f2]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[13f]"></a>HAL_FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPagesFullWriteVariable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageState
</UL>

<P><STRONG><a name="[ee]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[16d]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 298 bytes, Stack size 36 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[142]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio-board.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>

<P><STRONG><a name="[138]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>

<P><STRONG><a name="[124]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[143]"></a>HAL_IWDG_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskIWDG(void*)
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskIWDG(void*)
</UL>

<P><STRONG><a name="[18c]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SysTick_Handler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[145]"></a>HAL_InitTick</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[148]"></a>HAL_Make_First_System_Parameter</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, common.o(i.HAL_Make_First_System_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Make_First_System_Parameter &rArr; GpsDataSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Default_System_Config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>HAL_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[16e]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[ed]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[283]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_GetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetMcuWakeUpTime
</UL>

<P><STRONG><a name="[ec]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[144]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[150]"></a>HAL_PWREx_EnterSTOP0Mode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnterSTOP0Mode))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[151]"></a>HAL_PWREx_EnterSTOP1Mode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnterSTOP1Mode))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[228]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[ef]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_ConfigPVD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_PWR_ConfigPVD
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[f0]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[14c]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableLowPowerRunMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterSleepMode
</UL>

<P><STRONG><a name="[14f]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP1Mode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP0Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[152]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[155]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetOscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetOscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
</UL>

<P><STRONG><a name="[2af]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[156]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[157]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1118 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[276]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupRead
</UL>

<P><STRONG><a name="[278]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupWrite
</UL>

<P><STRONG><a name="[27e]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[159]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStopAlarm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[15a]"></a>HAL_RTC_GetAlarm</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetMcuWakeUpTime
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>

<P><STRONG><a name="[15d]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RTC_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[15f]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[162]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
</UL>

<P><STRONG><a name="[164]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetNewCalenarValue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[165]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetNewTimeValue
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetNewCalenarValue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[161]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
</UL>

<P><STRONG><a name="[16a]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[18a]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI1_SendByte
</UL>

<P><STRONG><a name="[168]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[167]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[16c]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI1_SendByte
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[173]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[172]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SysTick_Handler
</UL>

<P><STRONG><a name="[177]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[174]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 634 bytes, Stack size 56 bytes, stm32l4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART3_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART1_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[180]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, serial_pipe_hal.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[183]"></a>HAL_UART_Transmit</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART1_Send
</UL>

<P><STRONG><a name="[178]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HW_BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysirqhandlers.o(i.HW_BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_BusFault_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[10f]"></a>HW_DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysirqhandlers.o(i.HW_DebugMon_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[19f]"></a>HW_HardFault_Handler</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, sysirqhandlers.o(i.HW_HardFault_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[185]"></a>HW_MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysirqhandlers.o(i.HW_MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MemManage_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[186]"></a>HW_NMI_Handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sysirqhandlers.o(i.HW_NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_NMI_Handler &rArr; EE_DeleteCorruptedFlashAddress &rArr; DeleteCorruptedFlashAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_DeleteCorruptedFlashAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[187]"></a>HW_SPI1_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_driver.o(i.HW_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HW_SPI1_Init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[189]"></a>HW_SPI1_SendByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_driver.o(i.HW_SPI1_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>

<P><STRONG><a name="[18b]"></a>HW_SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.HW_SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f5]"></a>HW_UART1_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_driver.o(i.HW_UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_UART1_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[10d]"></a>HW_UART1_Send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_driver.o(i.HW_UART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
</UL>

<P><STRONG><a name="[18e]"></a>HW_UART3_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_driver.o(i.HW_UART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_UART3_Init &rArr; MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDataSerial(void*)
</UL>

<P><STRONG><a name="[190]"></a>HW_UART5_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_driver.o(i.HW_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_UART5_Init &rArr; MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
</UL>

<P><STRONG><a name="[192]"></a>HW_UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysirqhandlers.o(i.HW_UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UsageFault_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>IsFifoFull</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fifo.o(i.IsFifoFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsFifoFull
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1a0]"></a>LoRaMacAdrCalcNext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, loramacadr.o(i.LoRaMacAdrCalcNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRaMacAdrCalcNext &rArr; CalcNextV10X &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
</UL>

<P><STRONG><a name="[222]"></a>LoRaMacClassBBeaconFreqReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconFreqReq))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[196]"></a>LoRaMacClassBBeaconTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[221]"></a>LoRaMacClassBBeaconTimingAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconTimingAns))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[21e]"></a>LoRaMacClassBDeviceTimeAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBDeviceTimeAns))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[12e]"></a>LoRaMacClassBGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[2a0]"></a>LoRaMacClassBHaltBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBHaltBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[1e3]"></a>LoRaMacClassBInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBInit))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1f9]"></a>LoRaMacClassBIsAcquisitionInProgress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsAcquisitionInProgress))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[194]"></a>LoRaMacClassBIsBeaconExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsBeaconExpected))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[29e]"></a>LoRaMacClassBIsBeaconModeActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsBeaconModeActive))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[19a]"></a>LoRaMacClassBIsMulticastExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsMulticastExpected))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[197]"></a>LoRaMacClassBIsPingExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsPingExpected))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[29f]"></a>LoRaMacClassBIsUplinkCollision</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsUplinkCollision))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[1e9]"></a>LoRaMacClassBMibGetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBMibGetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[19c]"></a>LoRaMacClassBMulticastSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBMulticastSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[220]"></a>LoRaMacClassBPingSlotChannelReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[21f]"></a>LoRaMacClassBPingSlotInfoAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotInfoAns))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[199]"></a>LoRaMacClassBPingSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[1fb]"></a>LoRaMacClassBProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBProcess))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[274]"></a>LoRaMacClassBRestoreNvmCtx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBRestoreNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[1dc]"></a>LoRaMacClassBResumeBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBResumeBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[223]"></a>LoRaMacClassBRxBeacon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBRxBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[195]"></a>LoRaMacClassBSetBeaconState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[19b]"></a>LoRaMacClassBSetMulticastSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetMulticastSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[1f8]"></a>LoRaMacClassBSetPingSlotInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetPingSlotInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[198]"></a>LoRaMacClassBSetPingSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetPingSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[29d]"></a>LoRaMacClassBStopRxSlots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBStopRxSlots))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[2a3]"></a>LoRaMacClassBSwitchClass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSwitchClass))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[1a1]"></a>LoRaMacCommandsAddCmd</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, loramaccommands.o(i.LoRaMacCommandsAddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsAddCmd &rArr; mallocNewMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocNewMacCommandSlot
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[12d]"></a>LoRaMacCommandsGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[1fe]"></a>LoRaMacCommandsGetSizeSerializedCmds</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetSizeSerializedCmds))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1a4]"></a>LoRaMacCommandsInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCommandsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1a5]"></a>LoRaMacCommandsRemoveCmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCommandsRemoveCmd &rArr; freeMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMacCommandSlot
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
</UL>

<P><STRONG><a name="[1a7]"></a>LoRaMacCommandsRemoveNoneStickyCmds</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveNoneStickyCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsRemoveNoneStickyCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; freeMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[1a8]"></a>LoRaMacCommandsRemoveStickyAnsCmds</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveStickyAnsCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; freeMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1a9]"></a>LoRaMacCommandsRestoreNvmCtx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCommandsRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[1aa]"></a>LoRaMacCommandsSerializeCmds</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loramaccommands.o(i.LoRaMacCommandsSerializeCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCommandsSerializeCmds
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[1d0]"></a>LoRaMacCommandsStickyCmdsPending</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsStickyCmdsPending))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIndicationEvents
</UL>

<P><STRONG><a name="[1ab]"></a>LoRaMacConfirmQueueAdd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1db]"></a>LoRaMacConfirmQueueGetCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[12f]"></a>LoRaMacConfirmQueueGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[1ac]"></a>LoRaMacConfirmQueueGetStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1fc]"></a>LoRaMacConfirmQueueGetStatusCmn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetStatusCmn))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1ad]"></a>LoRaMacConfirmQueueHandleCb</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueHandleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[1af]"></a>LoRaMacConfirmQueueInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[105]"></a>LoRaMacConfirmQueueIsCmdActive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueIsCmdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[1f3]"></a>LoRaMacConfirmQueueIsFull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1ae]"></a>LoRaMacConfirmQueueRemoveFirst</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueRemoveFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[1b0]"></a>LoRaMacConfirmQueueRestoreNvmCtx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[1b1]"></a>LoRaMacConfirmQueueSetStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueSetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[19d]"></a>LoRaMacConfirmQueueSetStatusCmn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueSetStatusCmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[1b2]"></a>LoRaMacCryptoDeriveMcKEKey</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcKEKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LoRaMacCryptoDeriveMcKEKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1b3]"></a>LoRaMacCryptoDeriveMcRootKey</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcRootKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[12a]"></a>LoRaMacCryptoGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[1b4]"></a>LoRaMacCryptoHandleJoinAccept</STRONG> (Thumb, 376 bytes, Stack size 304 bytes, loramaccrypto.o(i.LoRaMacCryptoHandleJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = LoRaMacCryptoHandleJoinAccept &rArr; DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1b9]"></a>LoRaMacCryptoInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCryptoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFCnts
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1bb]"></a>LoRaMacCryptoPrepareJoinRequest</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacCryptoPrepareJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LoRaMacCryptoPrepareJoinRequest &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRandomNumber
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[1bf]"></a>LoRaMacCryptoRestoreNvmCtx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCryptoRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[1c0]"></a>LoRaMacCryptoSecureMessage</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacCryptoSecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[1c4]"></a>LoRaMacCryptoSetKey</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1f0]"></a>LoRaMacCryptoSetLrWanVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoSetLrWanVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1c6]"></a>LoRaMacCryptoUnsecureMessage</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, loramaccrypto.o(i.LoRaMacCryptoUnsecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFCntDown
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAddrItem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[130]"></a>LoRaMacFCntHandlerGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacfcnthandler.o(i.LoRaMacFCntHandlerGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[1cc]"></a>LoRaMacFCntHandlerInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, loramacfcnthandler.o(i.LoRaMacFCntHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacFCntHandlerInit &rArr; LoRaMacResetFCnts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacResetFCnts
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1ce]"></a>LoRaMacFCntHandlerRestoreNvmCtx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, loramacfcnthandler.o(i.LoRaMacFCntHandlerRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacFCntHandlerRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[1e1]"></a>LoRaMacFCntHandlerSetMulticastReference</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loramacfcnthandler.o(i.LoRaMacFCntHandlerSetMulticastReference))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[226]"></a>LoRaMacGetFCntDown</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, loramacfcnthandler.o(i.LoRaMacGetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LoRaMacGetFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[214]"></a>LoRaMacGetFCntUp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramacfcnthandler.o(i.LoRaMacGetFCntUp))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[1dd]"></a>LoRaMacInitialization</STRONG> (Thumb, 940 bytes, Stack size 96 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LoRaMacInitialization &rArr; ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacFCntHandlerSetMulticastReference
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacFCntHandlerInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[1e5]"></a>LoRaMacIsBusy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1e4]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame()
</UL>

<P><STRONG><a name="[1f1]"></a>LoRaMacMibClassBSetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacMibClassBSetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1e8]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMibGetRequestConfirm
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent(void*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm(sMlmeConfirm*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm(sMcpsConfirm*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[1ea]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 1012 bytes, Stack size 40 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibClassBSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetLrWanVersion
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[1f2]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsAcquisitionInProgress
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoinNetwork()
</UL>

<P><STRONG><a name="[1c8]"></a>LoRaMacParserData</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, loramacparser.o(i.LoRaMacParserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacParserData
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1b6]"></a>LoRaMacParserJoinAccept</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, loramacparser.o(i.LoRaMacParserJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacParserJoinAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1fa]"></a>LoRaMacProcess</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacResetFCnts
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatusCmn
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBProcess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIndicationEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[1fd]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LoRaMacQueryTxPossible &rArr; LoRaMacAdrCalcNext &rArr; CalcNextV10X &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame()
</UL>

<P><STRONG><a name="[1cd]"></a>LoRaMacResetFCnts</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, loramacfcnthandler.o(i.LoRaMacResetFCnts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacResetFCnts
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacFCntHandlerInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>

<P><STRONG><a name="[1c2]"></a>LoRaMacSerializerData</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacSerializerData
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[1bd]"></a>LoRaMacSerializerJoinRequest</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, loramacserializer.o(i.LoRaMacSerializerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacSerializerJoinRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[200]"></a>LoRaMacSetFCntDown</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, loramacfcnthandler.o(i.LoRaMacSetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacSetFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[201]"></a>LoRaMacSetFCntUp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, loramacfcnthandler.o(i.LoRaMacSetFCntUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacSetFCntUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
</UL>

<P><STRONG><a name="[2d3]"></a>LoRaMacStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacStart))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[202]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[fe]"></a>LpmEnterLowPower</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpm-board.o(i.LpmEnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LpmEnterLowPower &rArr; LpmExitStopMode &rArr; BoardInitMcu &rArr; EepromMcuInit &rArr; EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitSleepMode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitOffMode
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterOffMode
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitStopMode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLowPowerHandler
</UL>

<P><STRONG><a name="[207]"></a>LpmEnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpm-board.o(i.LpmEnterOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[203]"></a>LpmEnterSleepMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.LpmEnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LpmEnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[205]"></a>LpmEnterStopMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(i.LpmEnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LpmEnterStopMode &rArr; BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[208]"></a>LpmExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpm-board.o(i.LpmExitOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[204]"></a>LpmExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpm-board.o(i.LpmExitSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[206]"></a>LpmExitStopMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.LpmExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LpmExitStopMode &rArr; BoardInitMcu &rArr; EepromMcuInit &rArr; EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[209]"></a>LpmGetMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpm-board.o(i.LpmGetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LpmGetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
</UL>

<P><STRONG><a name="[fb]"></a>LpmSetOffMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lpm-board.o(i.LpmSetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LpmSetOffMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[20a]"></a>LpmSetStopMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lpm-board.o(i.LpmSetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LpmSetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; HW_NMI_Handler &rArr; EE_DeleteCorruptedFlashAddress &rArr; DeleteCorruptedFlashAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d0]"></a>NvmCtxMgmtRestore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvmctxmgmt.o(i.NvmCtxMgmtRestore))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[2d4]"></a>NvmCtxMgmtStore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvmctxmgmt.o(i.NvmCtxMgmtStore))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[116]"></a>PageErase</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, flash_interface.o(i.PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBankNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_CleanUp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[213]"></a>PrepareFrame</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PrepareFrame &rArr; GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacGetFCntUp
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtc-board.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
</UL>

<P><STRONG><a name="[163]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[160]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[9f]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>RadioGetStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioGetStatus))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>RadioGetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioGetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioGetWakeupTime &rArr; SX1276GetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>RadioInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioInit &rArr; SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>RadioIsChannelFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioIsChannelFree &rArr; SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>RadioRandom</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioRandom &rArr; SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>RadioRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RadioRead &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>RadioReadBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RadioReadBuffer &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>RadioRssi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioRssi &rArr; SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>RadioRx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioRx &rArr; SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>RadioSend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioSend &rArr; SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>RadioSetChannel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RadioSetChannel &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>RadioSetModem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioSetModem &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadioSetPublicNetwork &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>RadioSetRxConfig</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, radio.o(i.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RadioSetRxConfig &rArr; SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>RadioSetTxConfig</STRONG> (Thumb, 40 bytes, Stack size 72 bytes, radio.o(i.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RadioSetTxConfig &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RadioSetTxContinuousWave &rArr; SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>RadioSleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioSleep &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>RadioStandby</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioStandby &rArr; SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>RadioStartCad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioStartCad &rArr; SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>RadioTimeOnAir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RadioTimeOnAir &rArr; SX1276GetTimeOnAir &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>RadioWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioWrite &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>RadioWriteBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RadioWriteBuffer &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>RegionAlternateDr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[224]"></a>RegionApplyCFList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionApplyCFList &rArr; RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[244]"></a>RegionApplyDrOffset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[106]"></a>RegionCalcBackOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionCalcBackOff &rArr; RegionEU868CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[1ee]"></a>RegionChanMaskSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionChanMaskSet &rArr; RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[248]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
</UL>

<P><STRONG><a name="[25b]"></a>RegionCommonChanDisable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
</UL>

<P><STRONG><a name="[259]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
</UL>

<P><STRONG><a name="[24a]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[24b]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[24d]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[24e]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[24f]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>

<P><STRONG><a name="[265]"></a>RegionCommonCountChannels</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[249]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[252]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 132 bytes, Stack size 44 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[262]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[268]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
</UL>

<P><STRONG><a name="[253]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[10a]"></a>RegionCommonValueInRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>

<P><STRONG><a name="[1ec]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[21b]"></a>RegionDlChannelReq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionDlChannelReq &rArr; RegionEU868DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[242]"></a>RegionEU868AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[243]"></a>RegionEU868ApplyCFList</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, regioneu868.o(i.RegionEU868ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[245]"></a>RegionEU868ApplyDrOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[246]"></a>RegionEU868CalcBackOff</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, regioneu868.o(i.RegionEU868CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionEU868CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[247]"></a>RegionEU868ChanMaskSet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[257]"></a>RegionEU868ChannelAdd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[258]"></a>RegionEU868ChannelsRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[255]"></a>RegionEU868ComputeRxWindowParameters</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, regioneu868.o(i.RegionEU868ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[256]"></a>RegionEU868DlChannelReq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[26d]"></a>RegionEU868GetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[25d]"></a>RegionEU868GetPhyParam</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[25f]"></a>RegionEU868InitDefaults</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, regioneu868.o(i.RegionEU868InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[261]"></a>RegionEU868LinkAdrReq</STRONG> (Thumb, 348 bytes, Stack size 120 bytes, regioneu868.o(i.RegionEU868LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[263]"></a>RegionEU868NewChannelReq</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[264]"></a>RegionEU868NextChannel</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, regioneu868.o(i.RegionEU868NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionEU868NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[26f]"></a>RegionEU868RxConfig</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, regioneu868.o(i.RegionEU868RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[266]"></a>RegionEU868RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[267]"></a>RegionEU868SetBandTxDone</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868SetBandTxDone))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[269]"></a>RegionEU868SetContinuousWave</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[26b]"></a>RegionEU868TxConfig</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, regioneu868.o(i.RegionEU868TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionEU868TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[272]"></a>RegionEU868TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[26c]"></a>RegionEU868Verify</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[12b]"></a>RegionGetNvmCtx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionGetNvmCtx))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetNvmCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[df]"></a>RegionGetPhyParam</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesProcess
</UL>

<P><STRONG><a name="[101]"></a>RegionInitDefaults</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[1de]"></a>RegionIsActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[217]"></a>RegionLinkAdrReq</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RegionLinkAdrReq &rArr; RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[219]"></a>RegionNewChannelReq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionNewChannelReq &rArr; RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[26e]"></a>RegionNextChannel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionNextChannel &rArr; RegionEU868NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[210]"></a>RegionRxConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionRxConfig &rArr; RegionEU868RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[218]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionEU868RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[227]"></a>RegionSetBandTxDone</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
</UL>

<P><STRONG><a name="[270]"></a>RegionSetContinuousWave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RegionSetContinuousWave &rArr; RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[271]"></a>RegionTxConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionTxConfig &rArr; RegionEU868TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[21a]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1e6]"></a>RegionVerify</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionVerify &rArr; RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1ef]"></a>RestoreCtxs</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, loramac.o(i.RestoreCtxs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RestoreCtxs &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRestoreNvmCtx
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacFCntHandlerRestoreNvmCtx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoRestoreNvmCtx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRestoreNvmCtx
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRestoreNvmCtx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRestoreNvmCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[275]"></a>RtcBkupRead</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc-board.o(i.RtcBkupRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcBkupRead
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[277]"></a>RtcBkupWrite</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc-board.o(i.RtcBkupWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcBkupWrite &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[279]"></a>RtcGetCalendarTime</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetCalendarTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTick2Ms
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[27a]"></a>RtcGetCalendarValue</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, rtc-board.o(i.RtcGetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetMcuWakeUpTime
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[2ae]"></a>RtcGetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[2ad]"></a>RtcGetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[27c]"></a>RtcGetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[27d]"></a>RtcGetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[f7]"></a>RtcInit</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, rtc-board.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RtcInit &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[280]"></a>RtcMs2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc-board.o(i.RtcMs2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RtcMs2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[281]"></a>RtcSetAlarm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtc-board.o(i.RtcSetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmGetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[20b]"></a>RtcSetMcuWakeUpTime</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rtc-board.o(i.RtcSetMcuWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RtcSetMcuWakeUpTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPendingIRQ
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCalibrateSystemWakeupTimeTimerEvent
</UL>

<P><STRONG><a name="[284]"></a>RtcSetNewCalenarValue</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, rtc-board.o(i.RtcSetNewCalenarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RtcSetNewCalenarValue &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
</UL>

<P><STRONG><a name="[285]"></a>RtcSetNewTimeValue</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtc-board.o(i.RtcSetNewTimeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RtcSetNewTimeValue &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
</UL>

<P><STRONG><a name="[27f]"></a>RtcSetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc-board.o(i.RtcSetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RtcSetTimerContext &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[282]"></a>RtcStartAlarm</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, rtc-board.o(i.RtcStartAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStopAlarm
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
</UL>

<P><STRONG><a name="[286]"></a>RtcStopAlarm</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc-board.o(i.RtcStopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RtcStopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>

<P><STRONG><a name="[27b]"></a>RtcTick2Ms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc-board.o(i.RtcTick2Ms))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28a]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276AntSwDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276AntSwDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[28b]"></a>SX1276AntSwInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276AntSwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[28e]"></a>SX1276GetBoardTcxoWakeupTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276GetBoardTcxoWakeupTime))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetWakeupTime
</UL>

<P><STRONG><a name="[22a]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>

<P><STRONG><a name="[23e]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 550 bytes, Stack size 72 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX1276GetTimeOnAir &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[22b]"></a>SX1276GetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetBoardTcxoWakeupTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>

<P><STRONG><a name="[22c]"></a>SX1276Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[e2]"></a>SX1276IoDeInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276IoDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[e6]"></a>SX1276IoInit</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sx1276mb1mas-board.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276IoInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[291]"></a>SX1276IoIrqInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sx1276mb1mas-board.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276IoIrqInit &rArr; GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[22d]"></a>SX1276IsChannelFree</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[9]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276OnDio1Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276OnDio2Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[22e]"></a>SX1276Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[22f]"></a>SX1276Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
</UL>

<P><STRONG><a name="[230]"></a>SX1276ReadBuffer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadBuffer
</UL>

<P><STRONG><a name="[293]"></a>SX1276ReadFifo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[231]"></a>SX1276ReadRssi</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
</UL>

<P><STRONG><a name="[28f]"></a>SX1276Reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276Reset &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[233]"></a>SX1276Send</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[297]"></a>SX1276SetAntSw</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sx1276mb1mas-board.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276SetAntSw
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[298]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[234]"></a>SX1276SetChannel</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
</UL>

<P><STRONG><a name="[235]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
</UL>

<P><STRONG><a name="[236]"></a>SX1276SetModem</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[290]"></a>SX1276SetOpMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[237]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>

<P><STRONG><a name="[299]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[232]"></a>SX1276SetRx</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[238]"></a>SX1276SetRxConfig</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[23b]"></a>SX1276SetSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>

<P><STRONG><a name="[23c]"></a>SX1276SetStby</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
</UL>

<P><STRONG><a name="[296]"></a>SX1276SetTx</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[239]"></a>SX1276SetTxConfig</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[23a]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sx1276.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[23d]"></a>SX1276StartCad</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
</UL>

<P><STRONG><a name="[23f]"></a>SX1276Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
</UL>

<P><STRONG><a name="[240]"></a>SX1276WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteBuffer
</UL>

<P><STRONG><a name="[294]"></a>SX1276WriteFifo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[1b5]"></a>SecureElementAesEncrypt</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, soft-se.o(i.SecureElementAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
</UL>

<P><STRONG><a name="[1be]"></a>SecureElementComputeAesCmac</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, soft-se.o(i.SecureElementComputeAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[113]"></a>SecureElementDeriveAndStoreKey</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, soft-se.o(i.SecureElementDeriveAndStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>

<P><STRONG><a name="[12c]"></a>SecureElementGetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, soft-se.o(i.SecureElementGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[1e0]"></a>SecureElementInit</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, soft-se.o(i.SecureElementInit))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1bc]"></a>SecureElementRandomNumber</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[273]"></a>SecureElementRestoreNvmCtx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[1c5]"></a>SecureElementSetKey</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, soft-se.o(i.SecureElementSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
</UL>

<P><STRONG><a name="[1b8]"></a>SecureElementVerifyAesCmac</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soft-se.o(i.SecureElementVerifyAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
</UL>

<P><STRONG><a name="[1e7]"></a>Send</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Send &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[29c]"></a>SendFrameOnChannel</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBStopRxSlots
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsUplinkCollision
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconModeActive
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1f5]"></a>SendReJoinReq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, loramac.o(i.SendReJoinReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1f6]"></a>SetTxContinuousWave</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetTxContinuousWave &rArr; RegionSetContinuousWave &rArr; RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1f7]"></a>SetTxContinuousWave1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetTxContinuousWave1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[14a]"></a>Set_Default_System_Config</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, common.o(i.Set_Default_System_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Default_System_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Make_First_System_Parameter
</UL>

<P><STRONG><a name="[e1]"></a>SpiDeInit</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, spi-board.o(i.SpiDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[2a1]"></a>SpiFormat</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, spi-board.o(i.SpiFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[2a2]"></a>SpiFrequency</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, spi-board.o(i.SpiFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[295]"></a>SpiInOut</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, spi-board.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[e5]"></a>SpiInit</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, spi-board.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFrequency
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFormat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; System1MsTick &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System1MsTick
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21c]"></a>SysTimeAdd</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, systime.o(i.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[20d]"></a>SysTimeGet</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, systime.o(i.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTimeGet &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupRead
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[103]"></a>SysTimeGetMcuTime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, systime.o(i.SysTimeGetMcuTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTimeGetMcuTime &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[21d]"></a>SysTimeSet</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, systime.o(i.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTimeSet &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[104]"></a>SysTimeSub</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, systime.o(i.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[2a4]"></a>System1MsTick</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, systick_driver.o(i.System1MsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = System1MsTick &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6a]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>TimerGetCurrentTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimerGetCurrentTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTick2Ms
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[254]"></a>TimerGetElapsedTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TimerGetElapsedTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTick2Ms
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcMs2Tick
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[e8]"></a>TimerInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[229]"></a>TimerIrqHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, timer.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerContext
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcMs2Tick
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetMinimumTimeout
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[ea]"></a>TimerStart</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timer.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm(sMcpsConfirm*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[1d8]"></a>TimerStop</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timer.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStopAlarm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent(void*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed2TimerEvent(void*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed1TimerEvent(void*)
</UL>

<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17d]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17b]"></a>UART_SetConfig</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[184]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>vtaskDislay(void*)</STRONG> (Thumb, 180 bytes, Stack size 192 bytes, task_display.o(i._Z11vtaskDislayPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = vtaskDislay(void*) &rArr; SimpleLCD::SimpleLCD(lcd_t*) &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::SimpleLCD(lcd_t*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdGoToXY(char, char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdClear()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdInit()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdWriteText(char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[2b2]"></a>PrintHexBuffer(unsigned char*, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, task_lora.o(i._Z14PrintHexBufferPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = PrintHexBuffer(unsigned char*, unsigned char) &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm(sMcpsConfirm*)
</UL>

<P><STRONG><a name="[91]"></a>vtaskDataSerial(void*)</STRONG> (Thumb, 130 bytes, Stack size 256 bytes, task_sensorserial.o(i._Z15vtaskDataSerialPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = vtaskDataSerial(void*) &rArr; parserDataMessage(char*) &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART3_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserDataMessage(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[8a]"></a>OnMacProcessNotify()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_lora.o(i._Z18OnMacProcessNotifyv))
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[2c5]"></a>Start_Init_ExtFlash()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_loadconfig.o(i._Z19Start_Init_ExtFlashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Start_Init_ExtFlash() &rArr; SST25ExtFlash::Start() &rArr; sFLASH_Init &rArr; sFLASH_ReadID &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c7]"></a>Read_Flash_Config_Saved()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main_loadconfig.o(i._Z23Read_Flash_Config_Savedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Read_Flash_Config_Saved() &rArr; SST25ExtFlash::read(void*, unsigned, unsigned) &rArr; sFLASH_ReadBuffer &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::read(void*, unsigned, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
</UL>

<P><STRONG><a name="[2ca]"></a>Check_Flash_Config_Saved()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main_loadconfig.o(i._Z24Check_Flash_Config_Savedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Check_Flash_Config_Saved() &rArr; SST25ExtFlash::write(const void*, unsigned, unsigned) &rArr; sFLASH_WriteBuffer &rArr; sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned) &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::eraseAll()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::write(const void*, unsigned, unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::read(void*, unsigned, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_Config_Saved()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>vtaskGnss(void*)</STRONG> (Thumb, 246 bytes, Stack size 288 bytes, task_gnss.o(i._Z9vtaskGnssPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = vtaskGnss(void*) &rArr; parseGPSStr &rArr; nmea_parse_gprmc &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART5_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGPSStr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[93]"></a>vtaskIWDG(void*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, task_watchdog.o(i._Z9vtaskIWDGPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vtaskIWDG(void*) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[8f]"></a>vtaskLoRa(void*)</STRONG> (Thumb, 878 bytes, Stack size 72 bytes, task_lora.o(i._Z9vtaskLoRaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = vtaskLoRa(void*) &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLowPowerHandler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetUniqueId
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetRandomSeed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame(unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxMgmtStore
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxMgmtRestore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[2c8]"></a>SST25ExtFlash::read(void*, unsigned, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, extmem_hal.o(i._ZN13SST25ExtFlash4readEPvjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SST25ExtFlash::read(void*, unsigned, unsigned) &rArr; sFLASH_ReadBuffer &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_Config_Saved()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
</UL>

<P><STRONG><a name="[2c6]"></a>SST25ExtFlash::Start()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, extmem_hal.o(i._ZN13SST25ExtFlash5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SST25ExtFlash::Start() &rArr; sFLASH_Init &rArr; sFLASH_ReadID &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Init_ExtFlash()
</UL>

<P><STRONG><a name="[2cc]"></a>SST25ExtFlash::write(const void*, unsigned, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, extmem_hal.o(i._ZN13SST25ExtFlash5writeEPKvjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SST25ExtFlash::write(const void*, unsigned, unsigned) &rArr; sFLASH_WriteBuffer &rArr; sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned) &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
</UL>

<P><STRONG><a name="[2cb]"></a>SST25ExtFlash::eraseAll()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, extmem_hal.o(i._ZN13SST25ExtFlash8eraseAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SST25ExtFlash::eraseAll() &rArr; SST25ExtFlash::erasePage(unsigned) &rArr; sFLASH_EraseSector &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::erasePage(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
</UL>

<P><STRONG><a name="[2d8]"></a>SST25ExtFlash::erasePage(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, extmem_hal.o(i._ZN13SST25ExtFlash9erasePageEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SST25ExtFlash::erasePage(unsigned) &rArr; sFLASH_EraseSector &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::eraseAll()
</UL>

<P><STRONG><a name="[2da]"></a>SimpleLCD::lcdGoToAddr(char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i._ZN9SimpleLCD11lcdGoToAddrEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SimpleLCD::lcdGoToAddr(char) &rArr; SimpleLCD::sendCommand4Bit(char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand4Bit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdGoToXY(char, char)
</UL>

<P><STRONG><a name="[2dc]"></a>SimpleLCD::sendCommand(char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd.o(i._ZN9SimpleLCD11sendCommandEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleLCD::sendCommand(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdInit()
</UL>

<P><STRONG><a name="[2b7]"></a>SimpleLCD::lcdWriteText(char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd.o(i._ZN9SimpleLCD12lcdWriteTextEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SimpleLCD::lcdWriteText(char*) &rArr; SimpleLCD::sendCommand4Bit(char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand4Bit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[2db]"></a>SimpleLCD::sendCommand4Bit(char)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lcd.o(i._ZN9SimpleLCD15sendCommand4BitEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleLCD::sendCommand4Bit(char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdClear()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdInit()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdWriteText(char*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdGoToAddr(char)
</UL>

<P><STRONG><a name="[2b4]"></a>SimpleLCD::lcdInit()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lcd.o(i._ZN9SimpleLCD7lcdInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SimpleLCD::lcdInit() &rArr; SimpleLCD::sendCommand4Bit(char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand4Bit(char)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[2b5]"></a>SimpleLCD::lcdClear()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i._ZN9SimpleLCD8lcdClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SimpleLCD::lcdClear() &rArr; SimpleLCD::sendCommand4Bit(char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::sendCommand4Bit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[2b6]"></a>SimpleLCD::lcdGoToXY(char, char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcd.o(i._ZN9SimpleLCD9lcdGoToXYEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SimpleLCD::lcdGoToXY(char, char) &rArr; SimpleLCD::lcdGoToAddr(char) &rArr; SimpleLCD::sendCommand4Bit(char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLCD::lcdGoToAddr(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[2b3]"></a>SimpleLCD::SimpleLCD(lcd_t*)</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, lcd.o(i._ZN9SimpleLCDC1EP5lcd_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SimpleLCD::SimpleLCD(lcd_t*) &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[341]"></a>SimpleLCD::SimpleLCD__sub_object(lcd_t*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, lcd.o(i._ZN9SimpleLCDC1EP5lcd_t), UNUSED)

<P><STRONG><a name="[2c1]"></a>std::strchr(char*, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task_sensorserial.o(i._ZSt6strchrPci))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserDataMessage(char*)
</UL>

<P><STRONG><a name="[2de]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[342]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2b8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[343]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[344]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2e0]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[345]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[346]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[347]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[10c]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[348]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2c2]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserDataMessage(char*)
</UL>

<P><STRONG><a name="[24c]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[251]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[28c]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[2e1]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[349]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[34a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[34b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2e2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[d5]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[d8]"></a>aes_encrypt</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>

<P><STRONG><a name="[dc]"></a>aes_set_key</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
</UL>

<P><STRONG><a name="[1a6]"></a>freeMacCommandSlot</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, loramaccommands.o(i.freeMacCommandSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freeMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>

<P><STRONG><a name="[2ef]"></a>isSlotFree</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramaccommands.o(i.isSlotFree))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocNewMacCommandSlot
</UL>

<P><STRONG><a name="[69]"></a>main</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, main_1.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; BoardInitMcu &rArr; EepromMcuInit &rArr; EE_Init &rArr; PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Make_First_System_Parameter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flash_Config_Saved()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Init_ExtFlash()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1a2]"></a>mallocNewMacCommandSlot</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, loramaccommands.o(i.mallocNewMacCommandSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mallocNewMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSlotFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[d9]"></a>memcpy1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utilities.o(i.memcpy1))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRestoreNvmCtx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacFCntHandlerRestoreNvmCtx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoRestoreNvmCtx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRestoreNvmCtx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRestoreNvmCtx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[1b7]"></a>memcpyr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utilities.o(i.memcpyr))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>

<P><STRONG><a name="[d7]"></a>memset1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utilities.o(i.memset1))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMacCommandSlot
</UL>

<P><STRONG><a name="[2f1]"></a>nmea_get_message_type</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nmea.o(i.nmea_get_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nmea_get_message_type &rArr; nmea_valid_checksum &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_valid_checksum
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGPSStr
</UL>

<P><STRONG><a name="[2f4]"></a>nmea_parse_gpgga</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, nmea.o(i.nmea_parse_gpgga))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nmea_parse_gpgga &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetNewTimeValue
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGPSStr
</UL>

<P><STRONG><a name="[2f5]"></a>nmea_parse_gprmc</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, nmea.o(i.nmea_parse_gprmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nmea_parse_gprmc &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetNewCalenarValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGPSStr
</UL>

<P><STRONG><a name="[2f2]"></a>nmea_valid_checksum</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nmea.o(i.nmea_valid_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nmea_valid_checksum &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_get_message_type
</UL>

<P><STRONG><a name="[2ce]"></a>parseGPSStr</STRONG> (Thumb, 48 bytes, Stack size 80 bytes, nmea.o(i.parseGPSStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = parseGPSStr &rArr; nmea_parse_gprmc &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gprmc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_gpgga
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_get_message_type
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
</UL>

<P><STRONG><a name="[319]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[309]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[31c]"></a>rand1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, utilities.o(i.rand1))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[25e]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[2d9]"></a>sFLASH_EraseSector</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sst25vf_spi.o(i.sFLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sFLASH_EraseSector &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::erasePage(unsigned)
</UL>

<P><STRONG><a name="[2d6]"></a>sFLASH_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sst25vf_spi.o(i.sFLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sFLASH_Init &rArr; sFLASH_ReadID &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteDisable()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::Start()
</UL>

<P><STRONG><a name="[2d5]"></a>sFLASH_ReadBuffer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sst25vf_spi.o(i.sFLASH_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sFLASH_ReadBuffer &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::read(void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[31d]"></a>sFLASH_ReadID</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sst25vf_spi.o(i.sFLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sFLASH_ReadID &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[2d7]"></a>sFLASH_WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sst25vf_spi.o(i.sFLASH_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sFLASH_WriteBuffer &rArr; sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned) &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteByte(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25ExtFlash::write(const void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1e2]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[2f8]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2fd]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[308]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2fa]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2f9]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2fc]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2fe]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[306]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[324]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[31e]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[301]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[313]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2b9]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskIWDG(void*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskGnss(void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDataSerial(void*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDislay(void*)
</UL>

<P><STRONG><a name="[32a]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[318]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[321]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[320]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2ee]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[311]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b1]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[323]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2a6]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System1MsTick
</UL>

<P><STRONG><a name="[300]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[328]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[329]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[32c]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[30f]"></a>xQueueReceive</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[32b]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2ed]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a5]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System1MsTick
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[314]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[327]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[304]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[317]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[312]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[322]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[30e]"></a>xTimerGenericCommand</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[70]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[171]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[288]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[289]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[71]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[175]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[72]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[158]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[153]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[154]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[140]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[141]"></a>FLASH_Program_Fast</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[13c]"></a>FLASH_MassErase</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[14b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[302]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[303]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[30b]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[316]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2f7]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2fb]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[305]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[95]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[307]"></a>prvInitialiseNewTask</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[32d]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2ff]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[30a]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[30c]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[310]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[30d]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[315]"></a>prvSwitchTimerLists</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[96]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[31a]"></a>prvHeapInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[31b]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[94]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[191]"></a>MX_UART5_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_driver.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART5_Init
</UL>

<P><STRONG><a name="[18d]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_driver.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART1_Init
</UL>

<P><STRONG><a name="[18f]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_driver.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART3_Init
</UL>

<P><STRONG><a name="[188]"></a>MX_SPI1_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi_driver.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI1_Init
</UL>

<P><STRONG><a name="[2e8]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[2f0]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[2e9]"></a>mix_sub_columns</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[2eb]"></a>shift_sub_rows</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[2ea]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[107]"></a>ComputeCmac</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, soft-se.o(i.ComputeCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>

<P><STRONG><a name="[85]"></a>DummyCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soft-se.o(i.DummyCB))
<BR>[Address Reference Count : 1]<UL><LI> soft-se.o(i.SecureElementInit)
</UL>
<P><STRONG><a name="[6f]"></a>OnCalibrateSystemWakeupTimeTimerEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.OnCalibrateSystemWakeupTimeTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OnCalibrateSystemWakeupTimeTimerEvent &rArr; RtcSetMcuWakeUpTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetMcuWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.BoardInitMcu)
</UL>
<P><STRONG><a name="[f4]"></a>SystemClockConfig</STRONG> (Thumb, 188 bytes, Stack size 240 bytes, board.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SystemClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[e4]"></a>SystemClockReConfig</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, board.o(i.SystemClockReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClockReConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[128]"></a>FindPage</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, eeprom_emul.o(i.FindPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_CleanUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageState
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPagesFullWriteVariable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVariable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagesTransfer
</UL>

<P><STRONG><a name="[115]"></a>GetPageState</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, eeprom_emul.o(i.GetPageState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetPageState
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPage
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_CleanUp
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVariable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagesTransfer
</UL>

<P><STRONG><a name="[11f]"></a>PagesTransfer</STRONG> (Thumb, 944 bytes, Stack size 56 bytes, eeprom_emul.o(i.PagesTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PagesTransfer &rArr; ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageState
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPagesFullWriteVariable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageState
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[212]"></a>ReadVariable</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, eeprom_emul.o(i.ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ReadVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageState
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPage
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagesTransfer
</UL>

<P><STRONG><a name="[11c]"></a>SetPageState</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, eeprom_emul.o(i.SetPageState))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPageState &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPage
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagesTransfer
</UL>

<P><STRONG><a name="[11b]"></a>VerifyPageFullyErased</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, eeprom_emul.o(i.VerifyPageFullyErased))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VerifyPageFullyErased
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[120]"></a>VerifyPagesFullWriteVariable</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, eeprom_emul.o(i.VerifyPagesFullWriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VerifyPagesFullWriteVariable &rArr; FindPage &rArr; EE_CleanUp &rArr; PageErase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPage
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagesTransfer
</UL>

<P><STRONG><a name="[211]"></a>GetBankNumber</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, flash_interface.o(i.GetBankNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBankNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
</UL>

<P><STRONG><a name="[126]"></a>FifoNext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(i.FifoNext))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>

<P><STRONG><a name="[2ab]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[2ac]"></a>TimerSetTimeout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[2bc]"></a>sFLASH_SendByte(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sst25vf_spi.o(i._Z15sFLASH_SendByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteDisable()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteByte(unsigned, unsigned char)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[2be]"></a>sFLASH_WriteByte(unsigned, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sst25vf_spi.o(i._Z16sFLASH_WriteBytejh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sFLASH_WriteByte(unsigned, unsigned char) &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBuffer
</UL>

<P><STRONG><a name="[2c3]"></a>sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sst25vf_spi.o(i._Z17sFLASH_WriteBytesPKhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned) &rArr; sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteDisable()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBuffer
</UL>

<P><STRONG><a name="[2bf]"></a>sFLASH_WriteEnable()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sst25vf_spi.o(i._Z18sFLASH_WriteEnablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sFLASH_WriteEnable() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteByte(unsigned, unsigned char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[2c4]"></a>sFLASH_WriteDisable()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sst25vf_spi.o(i._Z19sFLASH_WriteDisablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sFLASH_WriteDisable() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[2c0]"></a>sFLASH_WaitForWriteEnd()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sst25vf_spi.o(i._Z22sFLASH_WaitForWriteEndv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sFLASH_WaitForWriteEnd() &rArr; sFLASH_SendByte(unsigned char) &rArr; HW_SPI1_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBytes(const unsigned char*, unsigned, unsigned)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteByte(unsigned, unsigned char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[29a]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[287]"></a>RxChainCalibration</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[de]"></a>AckTimeoutRetriesProcess</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, loramac.o(i.AckTimeoutRetriesProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AckTimeoutRetriesProcess &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[102]"></a>CalculateBackOff</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CalculateBackOff &rArr; SysTimeGetMcuTime &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[122]"></a>CallNvmCtxCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramac.o(i.CallNvmCtxCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSecureElementNvmCtxChanged
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFCntHandlerNvmCtxChanged
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCryptoNvmCtxChanged
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventConfirmQueueNvmCtxChanged
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCommandsNvmCtxChanged
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventClassBNvmCtxChanged
</UL>

<P><STRONG><a name="[83]"></a>EventClassBNvmCtxChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.EventClassBNvmCtxChanged))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[81]"></a>EventCommandsNvmCtxChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.EventCommandsNvmCtxChanged))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[75]"></a>EventConfirmQueueNvmCtxChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.EventConfirmQueueNvmCtxChanged))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[80]"></a>EventCryptoNvmCtxChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.EventCryptoNvmCtxChanged))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[82]"></a>EventFCntHandlerNvmCtxChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.EventFCntHandlerNvmCtxChanged))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7f]"></a>EventSecureElementNvmCtxChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.EventSecureElementNvmCtxChanged))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[133]"></a>GetMaxAppPayloadWithoutFOptsLength</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramac.o(i.GetMaxAppPayloadWithoutFOptsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[193]"></a>HandleRadioRxErrorTimeout</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, loramac.o(i.HandleRadioRxErrorTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HandleRadioRxErrorTimeout &rArr; LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[1cf]"></a>LoRaMacHandleIndicationEvents</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleIndicationEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacHandleIndicationEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsStickyCmdsPending
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1d2]"></a>LoRaMacHandleIrqEvents</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleIrqEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1d7]"></a>LoRaMacHandleMcpsRequest</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacHandleMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LoRaMacHandleMcpsRequest &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesProcess
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1da]"></a>LoRaMacHandleRequestEvents</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleRequestEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacHandleRequestEvents &rArr; LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBResumeBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[79]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loramac.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7b]"></a>OnRadioRxDone</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OnRadioRxDone &rArr; TimerGetCurrentTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7c]"></a>OnRadioRxError</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, loramac.o(i.OnRadioRxError))
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7e]"></a>OnRadioRxTimeout</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, loramac.o(i.OnRadioRxTimeout))
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7a]"></a>OnRadioTxDone</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OnRadioTxDone &rArr; SysTimeGet &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7d]"></a>OnRadioTxTimeout</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, loramac.o(i.OnRadioTxTimeout))
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[77]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[78]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[76]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[1ed]"></a>OpenContinuousRxCWindow</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(i.OpenContinuousRxCWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionEU868RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[215]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrepareRxDoneAbort &rArr; OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[216]"></a>ProcessMacCommands</STRONG> (Thumb, 1272 bytes, Stack size 112 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotInfoAns
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotChannelReq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBDeviceTimeAns
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimingAns
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconFreqReq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1d6]"></a>ProcessRadioRxDone</STRONG> (Thumb, 1348 bytes, Stack size 192 bytes, loramac.o(i.ProcessRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetFCntDown
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacGetFCntDown
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRxBeacon
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineFrameType
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[1d5]"></a>ProcessRadioTxDone</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, loramac.o(i.ProcessRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ProcessRadioTxDone &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[1df]"></a>ResetMacParameters</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacResetFCnts
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[20e]"></a>RxWindowSetup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[20f]"></a>ScheduleTx</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[29b]"></a>SecureFrame</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loramac.o(i.SecureFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacGetFCntUp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1d1]"></a>SetMlmeScheduleUplinkIndication</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramac.o(i.SetMlmeScheduleUplinkIndication))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIndicationEvents
</UL>

<P><STRONG><a name="[1d9]"></a>StopRetransmission</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, loramac.o(i.StopRetransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopRetransmission &rArr; LoRaMacSetFCntUp
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetFCntUp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacGetFCntUp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[1eb]"></a>SwitchClass</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, loramac.o(i.SwitchClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[19e]"></a>UpdateRxSlotIdleState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramac.o(i.UpdateRxSlotIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[100]"></a>CalcNextV10X</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, loramacadr.o(i.CalcNextV10X))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CalcNextV10X &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>

<P><STRONG><a name="[1a3]"></a>NvmCtxCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramaccommands.o(i.NvmCtxCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>

<P><STRONG><a name="[131]"></a>GetElement</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.GetElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>

<P><STRONG><a name="[132]"></a>IncreaseBufferPointer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.IncreaseBufferPointer))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>

<P><STRONG><a name="[1c7]"></a>CheckFCntDown</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, loramaccrypto.o(i.CheckFCntDown))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[112]"></a>DeriveSessionKey10x</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, loramaccrypto.o(i.DeriveSessionKey10x))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[74]"></a>DummyCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramaccrypto.o(i.DummyCB))
<BR>[Address Reference Count : 1]<UL><LI> loramaccrypto.o(i.LoRaMacCryptoInit)
</UL>
<P><STRONG><a name="[1c9]"></a>GetKeyAddrItem</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, loramaccrypto.o(i.GetKeyAddrItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyAddrItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[1c1]"></a>PayloadEncrypt</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, loramaccrypto.o(i.PayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PayloadEncrypt &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[1c3]"></a>PrepareB0</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, loramaccrypto.o(i.PrepareB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
</UL>

<P><STRONG><a name="[1ba]"></a>ResetFCnts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loramaccrypto.o(i.ResetFCnts))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
</UL>

<P><STRONG><a name="[1cb]"></a>UpdateFCntDown</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, loramaccrypto.o(i.UpdateFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[1ca]"></a>VerifyCmacB0</STRONG> (Thumb, 112 bytes, Stack size 320 bytes, loramaccrypto.o(i.VerifyCmacB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[1ff]"></a>NvmCtxChanged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramacfcnthandler.o(i.NvmCtxChanged))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetFCntUp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetFCntDown
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacResetFCnts
</UL>

<P><STRONG><a name="[109]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, regioneu868.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[25c]"></a>GetBandwidth</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, regioneu868.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[26a]"></a>LimitTxPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioneu868.o(i.LimitTxPower))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>

<P><STRONG><a name="[25a]"></a>VerifyRfFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, regioneu868.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>

<P><STRONG><a name="[2bd]"></a>parserDataMessage(char*)</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, task_sensorserial.o(i._Z17parserDataMessagePc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = parserDataMessage(char*) &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskDataSerial(void*)
</UL>

<P><STRONG><a name="[2b1]"></a>JoinNetwork()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, task_lora.o(i._Z11JoinNetworkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = JoinNetwork() &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent(void*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm(sMlmeConfirm*)
</UL>

<P><STRONG><a name="[86]"></a>McpsConfirm(sMcpsConfirm*)</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, task_lora.o(i._Z11McpsConfirmP12sMcpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = McpsConfirm(sMcpsConfirm*) &rArr; PrintHexBuffer(unsigned char*, unsigned char) &rArr; DEBUG_D &rArr; HW_UART1_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[88]"></a>MlmeConfirm(sMlmeConfirm*)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, task_lora.o(i._Z11MlmeConfirmP12sMlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MlmeConfirm(sMlmeConfirm*) &rArr; JoinNetwork() &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoinNetwork()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[87]"></a>McpsIndication(sMcpsIndication*)</STRONG> (Thumb, 592 bytes, Stack size 112 bytes, task_lora.o(i._Z14McpsIndicationP15sMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = McpsIndication(sMcpsIndication*) &rArr; OnTxNextPacketTimerEvent(void*) &rArr; JoinNetwork() &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer(unsigned char*, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoinNetwork()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[89]"></a>MlmeIndication(sMlmeIndication*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, task_lora.o(i._Z14MlmeIndicationP15sMlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MlmeIndication(sMlmeIndication*) &rArr; OnTxNextPacketTimerEvent(void*) &rArr; JoinNetwork() &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[2ba]"></a>PrepareTxFrame(unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, task_lora.o(i._Z14PrepareTxFrameh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrepareTxFrame(unsigned char) &rArr; CreateDataPackage
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDataPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[8c]"></a>OnLed1TimerEvent(void*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, task_lora.o(i._Z16OnLed1TimerEventPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OnLed1TimerEvent(void*) &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[8d]"></a>OnLed2TimerEvent(void*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, task_lora.o(i._Z16OnLed2TimerEventPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OnLed2TimerEvent(void*) &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[8b]"></a>OnTxNextPacketTimerEvent(void*)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, task_lora.o(i._Z24OnTxNextPacketTimerEventPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = OnTxNextPacketTimerEvent(void*) &rArr; JoinNetwork() &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoinNetwork()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication(sMlmeIndication*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication(sMcpsIndication*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lora.o(i._Z9vtaskLoRaPv)
</UL>
<P><STRONG><a name="[2cd]"></a>SendFrame()</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, task_lora.o(i._Z9SendFramev))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SendFrame() &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_D
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtaskLoRa(void*)
</UL>

<P><STRONG><a name="[2e4]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2df]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[2e6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsprintf)
<LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[cc]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[d2]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
